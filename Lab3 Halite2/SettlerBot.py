"""Добро пожаловать в ваш первый бот Halite-II!

Этого бота зовут Settler. Его цель проста (не ожидайте, что он выиграет сложные игры:)):
1. Инициализируйте игру
2. Если корабль не пришвартован и есть бесхозные планеты
2.a. Если достаточно близко, попытайтесь пришвартоваться к планете
2.b Если нет, идите к планете

Заметка: Пожалуйста, не размещайте здесь инструкции print, потому что они используются для связи с
движком Halite. Если вам необходимо логировать что-то, используйте модуль logging.
"""
import hlt
import logging

# GAME START
# Здесь мы определяем имя бота как Settler и инициализируем игру, включая связь с движком Halite.
game = hlt.Game('Settler')
# Затем мы печатаем наше стартовое сообщение в логе
logging.info('Запускаем бота Settler!')

while True:
    # TURN START
    # Обновите карту для нового поворота и получите последнюю версию
    game_map = game.update_map()

    # Здесь мы определяем набор команд, которые будут отправлены в движок Halite в конце хода
    command_queue = []
    # Для каждого корабля, которым я управляю
    for ship in game_map.get_me().all_ships():
        # Если корабль пришвартован
        if ship.docking_status != ship.DockingStatus.UNDOCKED:
            # Пропускаем этот корабль
            continue

        # Для каждой планеты в игре (включены только не уничтоженные планеты)
        for planet in game_map.all_planets():
            # Если планета захвачена
            if planet.is_owned():
                # Пропускаем эту планету
                continue

            # Если мы можем пришвартоваться, давайте попробуем сделать это.
            # Если два корабля попытаются состыковаться одновременно,
            # ни один из них не сможет этого сделать.
            if ship.can_dock(planet):
                # Мы добавляем команду, присоединяя её к command_queue
                command_queue.append(ship.dock(planet))
            else:
                # Если мы не можем пришвартоваться, мы движемся к ближайшей пустой точке возле этой
                # планеты (используя closest_point_to) с постоянной скоростью. Пока не беспокойтесь
                # о поиске пути, так как команда сделает это за вас. Мы выполняем эту навигационную
                # команду каждый ход, пока не прибудем. Здесь мы движемся с половиной нашей
                # максимальной скорости, чтобы лучше управлять кораблями. Для более быстрого
                # выполнения мы также решили игнорировать расчёты столкновения судов во время
                # навигации. Это будет означать, что у вас будет более высокая вероятность
                # столкновения с кораблями, но это также означает, что вы будете принимать решения о
                # перемещении намного быстрее. По мере того как ваше мастерство прогрессирует и ваши
                # ходы становятся более оптимальными, вы можете отключить эту опцию.
                navigate_command = ship.navigate(
                    ship.closest_point_to(planet),
                    game_map,
                    speed=int(hlt.constants.MAX_SPEED / 2),
                    ignore_ships=True)
                # Если перемещение возможно, добавьте его в command_queue (если на пути слишком
                # много препятствий или мы попали в ловушку (или мы достигли места назначения!),
                # navigate_command вернёт значение null; не волнуйтесь, мы можем выполнить команду
                # снова на следующем ходу)
                if navigate_command:
                    command_queue.append(navigate_command)
            break

    # Отправьте наш набор команд в движок Halite для этого хода
    game.send_command_queue(command_queue)
    # TURN END
# GAME END
